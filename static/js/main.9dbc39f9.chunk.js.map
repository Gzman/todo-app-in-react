{"version":3,"sources":["context/currentViewPortContext.js","components/header/Logo.js","components/header/GlobalFilter.js","components/header/Header.js","components/project/ProjectItem.js","components/sidebar/ProjectFilter.js","components/ui/ColapseWrapper.js","components/sidebar/CompleteProjectList.js","components/modal/Modal.js","hooks/useProjectFormValidation.js","components/forms/ProjectForm.js","hooks/useRenderModal.js","components/sidebar/ProjectList.js","components/sidebar/Sidebar.js","components/content/TaskSort.js","components/modal/RemoveModal.js","components/content/ProjectControlls.js","buisnesslogic/taskPriorities.js","components/forms/TaskForm.js","hooks/useTaskFormValidation.js","components/forms/MoveTaskForm.js","components/task/TaskItem.js","components/task/TaskItems.js","components/content/ProjectView.js","buisnesslogic/filterTasks.js","components/content/FilterView.js","components/content/Content.js","hooks/useLocalStorage.js","buisnesslogic/createExampleProjects.js","hooks/useProjects.js","buisnesslogic/projects.js","buisnesslogic/sortTasks.js","App.js","hooks/useNavigateContent.js","hooks/useTaskFilter.js","index.js"],"names":["CurrentViewPortContext","createContext","useCurrentViewPortContext","useContext","getCurrentViewPort","vw","window","innerWidth","vh","innerHeight","CurrentViewPortProvider","children","useState","viewPort","setViewPort","saveCurrentViewPort","useEffect","addEventListener","removeEventListener","Provider","value","Logo","className","GlobalFilter","filterTasksByText","filterAllTasks","filterCriticalTasks","filterCompletedTasks","filterExpiredTasks","type","placeholder","onChange","e","target","onClick","Header","ProjectItem","name","taskCount","active","isCompleted","setAsSelected","editProject","isEditAble","setIsEditAble","onKeyPress","key","onBlur","onDoubleClick","ProjectFilter","selectedProjectId","selectProject","timeTaskFilter","filterTasksToday","filterTasksThisWeek","filterTasksThisMonth","ColapseWrapper","classes","title","initialyColapsed","close","isColapsed","setIsColapsed","isMount","useRef","callback","current","CompleteProjectList","projects","completeProjects","filter","project","id","tasks","length","every","task","isComplete","getCompleteProjects","map","Modal","render","handleClose","currentTarget","useProjectFormValidation","nameNotSet","errors","setErrors","validate","ProjectForm","handleInSubmit","handleInCancel","setName","htmlFor","maxLength","preventDefault","useRenderModal","shouldRenderModal","setShouldRenderModal","renderModal","closeModal","toggleRenderModal","isProjectCompleted","ProjectList","addProject","closeProjectMenu","SideBar","hideProjectMenu","sideBar","TaskSort","taskSorting","sortAfterInsertion","sortAfterName","sortAfterDate","sortAfterPriority","sortAfterCompleted","Object","keys","option","RemoveModal","itemName","remove","ProjectControlls","projectName","renderNewTask","removeProject","sortTasksAfterInsertion","sortTasksAfterName","sortTasksAfterDate","sortTasksAfterPriority","sortTasksAfterComplete","taskPriorities","getPriorityWeight","priority","indexOf","TaskForm","taskToEdit","description","setDescription","dueDate","format","setDueDate","setPriority","isEditTaskForm","dateSetInPast","onlyOnUpdate","today","Date","setHours","useTaskFormValidation","rows","index","MoveTaskForm","currentProjectId","destinationProjectId","setDestinationProjectId","TaskItem","editTask","removeTask","moveTask","projectId","projectList","renderDetailView","setRenderDetailView","shouldRenderEditModal","renderEditModal","closeEditModal","shouldRenderRemoveModal","renderRemoveModal","closeRemoveModal","shouldRenderMoveModal","renderMoveModal","closeMoveModal","Actions","checked","destinationId","TaskItems","args","ProjectView","addTask","scrollTo","filterTasks","reduce","filtered","filteredTasks","push","filterId","uniqid","high","filterMapping","text","searchText","toLowerCase","includes","getFullYear","getMonth","getDate","getWeek","FilterView","arg","Content","exact","path","component","find","useLocalStorage","data","localStorage","setItem","JSON","stringify","load","parse","getItem","err","console","log","randomDaysInTheFuture","days","randOffset","Math","floor","random","randomDate","setTime","now","DEFAULT","useProjects","setProjects","setCurrentProjectId","serialized","savedProjects","forEach","add","edit","timestamp","addATask","editATask","removeATask","taskToMove","moveATask","sort","a","b","localeCompare","sortAfterComplete","App","navigateTo","history","useHistory","replace","useNavigateContent","setHideProjectMenu","prev","executeOnFilter","setFilter","useFilter","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dbc39f9.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\n\nconst CurrentViewPortContext = createContext();\n\nconst useCurrentViewPortContext = () => useContext(CurrentViewPortContext);\n\nconst getCurrentViewPort = () => {\n    return {\n        vw: window.innerWidth,\n        vh: window.innerHeight,\n    }\n}\n\nexport const tabletVw = 770;\nexport const smartphoneVw = 511;\n\nconst CurrentViewPortProvider = ({ children }) => {\n    const [viewPort, setViewPort] = useState(getCurrentViewPort());\n\n    const saveCurrentViewPort = () => setViewPort(getCurrentViewPort());\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", saveCurrentViewPort);\n        return () => window.removeEventListener(\"resize\", saveCurrentViewPort);\n    }, []);\n\n    return (\n        <CurrentViewPortContext.Provider value={viewPort} >\n            {children}\n        </CurrentViewPortContext.Provider>\n    )\n}\n\nexport { CurrentViewPortContext, useCurrentViewPortContext, CurrentViewPortProvider }","import React from \"react\"\nimport { SiTodoist } from \"react-icons/si\"\nimport \"./Header.css\"\n\nconst Logo = () => {\n    return (\n        <div className=\"header-logo\">\n            <SiTodoist className=\"logo-icon\" />\n            <h1 className=\"logo\">Todo App</h1>\n        </div>\n    )\n}\n\nexport { Logo }","import React from \"react\"\nimport \"./Header.css\"\n\nconst GlobalFilter = ({ filterTasksByText, filterAllTasks, filterCriticalTasks, filterCompletedTasks, filterExpiredTasks }) => {\n    return (\n        <div className=\"global-filter\">\n            <input\n                className=\"global-filter-text\"\n                type=\"text\"\n                placeholder=\"Search Tasks\"\n                onChange={(e) => filterTasksByText(e.target.value)}\n            />\n            <div className=\"global-filter-actions\">\n                <button className=\"global-filter-complete-btn\" onClick={filterCompletedTasks}>\n                    Complete\n                </button>\n                <button className=\"global-filter-critical-btn\" onClick={filterCriticalTasks}>\n                    Critical\n                </button>\n                <button className=\"global-filter-expired-btn\" onClick={filterExpiredTasks}>\n                    Expired\n                </button>\n                <button className=\"global-filter-all-btn\" onClick={filterAllTasks}>\n                    All\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport { GlobalFilter }","import React from \"react\"\nimport { Logo } from \"./Logo\"\nimport { GlobalFilter } from \"./GlobalFilter\"\nimport \"./Header.css\"\n\nconst Header = ({ filterTasksByText, filterAllTasks, filterCriticalTasks, filterCompletedTasks, filterExpiredTasks }) => {\n    return (\n        <div className=\"header\">\n            <Logo />\n            <GlobalFilter\n                filterTasksByText={filterTasksByText}\n                filterAllTasks={filterAllTasks}\n                filterCriticalTasks={filterCriticalTasks}\n                filterCompletedTasks={filterCompletedTasks}\n                filterExpiredTasks={filterExpiredTasks}\n            />\n        </div>\n    )\n}\n\nexport { Header }","import React, { useState } from \"react\"\nimport \"./ProjectItem.css\"\n\nconst ProjectItem = ({ name, taskCount, active, isCompleted, setAsSelected, editProject }) => {\n    const [isEditAble, setIsEditAble] = useState(false);\n    return (\n        <div\n            className={`project-item ${active && \"active\"} ${isCompleted && \"completed\"}`}\n            onClick={setAsSelected}\n        >\n            {\n                isEditAble\n                    ? <input\n                        className=\"project-item-name-input\"\n                        type=\"text\"\n                        onKeyPress={(e) => (e.key === \"Enter\" || e.key === \"Escape\") && setIsEditAble(false)}\n                        onBlur={() => setIsEditAble(false)}\n                        value={name}\n                        onChange={(e) => e.target.value && editProject(e.target.value)}\n                    />\n                    : <p\n                        className=\"project-item-name\"\n                        onDoubleClick={() => setIsEditAble(true)}>\n                        {name}\n                    </p>\n            }\n            {taskCount !== null && (taskCount > 0) && <p className=\"project-item-task-counter\">{taskCount}</p>}\n        </div>\n    )\n}\n\nexport { ProjectItem }","import React from \"react\"\nimport { ProjectItem } from \"../project/ProjectItem\"\nimport \"./SideBar.css\"\n\nconst ProjectFilter = ({ selectedProjectId, selectProject, timeTaskFilter }) => {\n    const { filterTasksToday, filterTasksThisWeek, filterTasksThisMonth } = timeTaskFilter;\n    return (\n        <div className=\"project-filter\">\n            <ProjectItem\n                name=\"Inbox\"\n                active={selectedProjectId === \"inbox\"}\n                setAsSelected={() => selectProject(\"inbox\")}\n            />\n            <button className=\"project-filter-today\" onClick={filterTasksToday}>\n                Today\n            </button>\n            <button className=\"project-filter-week\" onClick={filterTasksThisWeek}>\n                Week\n            </button>\n            <button className=\"project-filter-month\" onClick={filterTasksThisMonth}>\n                Month\n            </button>\n        </div>\n    )\n}\n\nexport { ProjectFilter }","import React, { useEffect, useState, useRef } from \"react\"\nimport { IoIosArrowDown, IoIosArrowUp } from \"react-icons/io\"\nimport \"./ColapseWrapper.css\"\n\nconst ColapseWrapper = ({ classes, title, children, initialyColapsed = false, close }) => {\n    const [isColapsed, setIsColapsed] = useState(initialyColapsed);\n\n    const isMount = useRef(true);\n    const onlyOnUpdate = (callback) => isMount.current ? isMount.current = false : callback();\n\n    useEffect(() => {\n        onlyOnUpdate(() => setIsColapsed(false));\n    }, [close]);\n\n    return (\n        <div className={`${classes} colapse-wrapper`}>\n            <div\n                className=\"colapse-wrapper-header\"\n                onClick={() => setIsColapsed(isColapsed => !isColapsed)}\n            >\n                <h4 className=\"colapse-wrapper-title\">{title}</h4>\n                {\n                    isColapsed\n                        ? <IoIosArrowUp className=\"colapse-wrapper-icon\" />\n                        : <IoIosArrowDown className=\"colapse-wrapper-icon\" />\n                }\n            </div>\n            {\n                isColapsed &&\n                <div className=\"colapse-wrapper-body\">\n                    {children}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport { ColapseWrapper }","import React from \"react\"\nimport { ProjectItem } from \"../project/ProjectItem\"\nimport { ColapseWrapper } from \"../ui/ColapseWrapper\"\nimport \"./SideBar.css\"\n\nconst getCompleteProjects = (projects) => {\n    return projects.filter((project) =>\n        project.id !== \"inbox\"\n        && project.tasks.length > 0\n        && project.tasks.every((task) => task.isComplete));\n}\n\nconst CompleteProjectList = ({ projects, selectedProjectId, selectProject }) => {\n    const completeProjects = getCompleteProjects(projects);\n    if (completeProjects?.length === 0) {\n        return null;\n    }\n    return (\n        <ColapseWrapper classes=\"complete-project-list\" title=\"Completed\">\n            {\n                completeProjects\n                    ?.map((project) =>\n                        <ProjectItem\n                            key={project.id}\n                            name={project.name}\n                            setAsSelected={() => selectProject(project.id)}\n                            active={project.id === selectedProjectId}\n                            taskCount={project.tasks.length}\n                        />\n                    )\n            }\n        </ColapseWrapper>\n    )\n}\n\nexport { CompleteProjectList }","import React from \"react\"\nimport \"./Modal.css\"\n\nconst Modal = ({ title, children, render, close }) => {\n    if (!render) {\n        return null;\n    }\n    const handleClose = (e) => {\n        if (e.target === e.currentTarget) {\n            close();\n        }\n    }\n    return (\n        <div className=\"backdrop\" onClick={handleClose}>\n            <div className=\"modal\">\n                <div className=\"modal-header\">\n                    <h3>{title}</h3>\n                    <h3 className=\"modal-close\" onClick={handleClose}>X</h3>\n                </div>\n                <div className=\"modal-body\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { Modal }","import { useRef, useEffect, useState } from \"react\";\n\nconst useProjectFormValidation = (name) => {\n    const [errors, setErrors] = useState({\n        nameNotSet: \"\",\n    });\n\n    const isMount = useRef(true);\n    const onlyOnUpdate = (callback) => {\n        if (isMount.current) {\n            isMount.current = false;\n        } else {\n            callback();\n        }\n    }\n\n    useEffect(() => {\n        onlyOnUpdate(validate);\n    }, [name]);\n\n    const validate = () => {\n        let nameNotSet = \"\";\n        if (name === \"\") {\n            nameNotSet = \"A name must be entered\";\n        }\n        setErrors({\n            nameNotSet,\n        });\n        return nameNotSet === \"\";\n    }\n\n    return {\n        errors,\n        validate,\n    }\n}\n\nexport { useProjectFormValidation }","import React, { useState } from \"react\"\nimport { useProjectFormValidation } from \"../../hooks/useProjectFormValidation\"\nimport \"./ProjectForm.css\"\n\nconst ProjectForm = ({ handleInSubmit, handleInCancel }) => {\n    const [name, setName] = useState(\"\");\n    const { errors, validate } = useProjectFormValidation(name);\n\n    const cancel = (e) => {\n        e.preventDefault();\n        handleInCancel && handleInCancel();\n    }\n\n    const submit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (isValid) {\n            handleInSubmit && handleInSubmit(name);\n        }\n    }\n\n    return (\n        <form id=\"project-form\">\n            <div className=\"project-form-input\">\n                <label htmlFor=\"project-form-name\">Name</label>\n                {errors.nameNotSet && <p className=\"error\">{errors.nameNotSet}</p>}\n                <input\n                    type=\"text\"\n                    id=\"project-form-name\"\n                    maxLength=\"50\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className=\"project-form-actions\">\n                <button type=\"submit\" className=\"project-form-ok-btn ok-btn\" onClick={submit}>Add</button>\n                <button className=\"project-form-cancel-btn\" onClick={cancel}>Cancel</button>\n            </div>\n        </form>\n    )\n}\n\nexport { ProjectForm }","\nimport { useState } from \"react\"\n\nconst useRenderModal = () => {\n    const [shouldRenderModal, setShouldRenderModal] = useState(false);\n\n    const renderModal = () => {\n        setShouldRenderModal(true);\n    }\n\n    const closeModal = () => {\n        setShouldRenderModal(false);\n    }\n\n    const toggleRenderModal = () => {\n        setShouldRenderModal(render => !render);\n    }\n\n    return {\n        shouldRenderModal,\n        renderModal,\n        closeModal,\n        toggleRenderModal,\n    }\n}\n\nexport { useRenderModal }","import React from \"react\"\nimport { Modal } from \"../modal/Modal\"\nimport { ProjectForm } from \"../forms/ProjectForm\"\nimport { ProjectItem } from \"../project/ProjectItem\"\nimport { ColapseWrapper } from \"../ui/ColapseWrapper\"\nimport { useRenderModal } from \"../../hooks/useRenderModal\"\nimport \"./SideBar.css\"\n\nconst isProjectCompleted = (project) => project.tasks.length > 0\n    && project.tasks.every((task) => task.isComplete);\n\nconst ProjectList = ({ projects, selectedProjectId, selectProject, addProject, editProject, closeProjectMenu }) => {\n    const { shouldRenderModal, renderModal, closeModal } = useRenderModal();\n    return (\n        <>\n            <ColapseWrapper classes=\"project-list\" title=\"Projects\" initialyColapsed={true}>\n                {\n                    projects?.map((project) =>\n                        (project.id !== \"inbox\")\n                        && < ProjectItem\n                            key={project.id}\n                            name={project.name}\n                            setAsSelected={() => selectProject(project.id)}\n                            active={project.id === selectedProjectId}\n                            isCompleted={isProjectCompleted(project)}\n                            taskCount={project.tasks.length}\n                            editProject={(name) => editProject(project.id, name)}\n                        />\n                    )\n                }\n                <button className=\"project-add-btn\" onClick={renderModal}>\n                    Add Project\n                </button>\n            </ColapseWrapper>\n\n            <Modal title=\"New Project\" render={shouldRenderModal} close={closeModal}>\n                <ProjectForm\n                    handleInSubmit={(name) => {\n                        addProject(name);\n                        closeModal();\n                        closeProjectMenu();\n                    }}\n                    handleInCancel={closeModal}\n                />\n            </Modal>\n        </>\n    )\n}\n\nexport { ProjectList }","import React from \"react\"\nimport { ProjectFilter } from \"./ProjectFilter\"\nimport { CompleteProjectList } from \"./CompleteProjectList\"\nimport { ProjectList } from \"./ProjectList\"\nimport { ColapseWrapper } from \"../ui/ColapseWrapper\"\nimport { useCurrentViewPortContext, tabletVw } from \"../../context/currentViewPortContext\"\nimport \"./SideBar.css\"\n\nconst SideBar = ({ projects, selectedProjectId, selectProject, addProject, editProject, timeTaskFilter, hideProjectMenu, closeProjectMenu }) => {\n    const viewPort = useCurrentViewPortContext();\n    const sideBar = (\n        <div className=\"sidebar\">\n            <ProjectFilter\n                selectedProjectId={selectedProjectId}\n                selectProject={selectProject}\n                timeTaskFilter={timeTaskFilter}\n            />\n            <CompleteProjectList\n                projects={projects}\n                selectedProjectId={selectedProjectId}\n                selectProject={selectProject}\n            />\n            <ProjectList\n                projects={projects}\n                selectedProjectId={selectedProjectId}\n                selectProject={selectProject}\n                addProject={addProject}\n                editProject={editProject}\n                closeProjectMenu={closeProjectMenu}\n            />\n        </div>\n    );\n\n    return (\n        viewPort.vw > tabletVw\n            ? sideBar\n            : <ColapseWrapper\n                classes=\"project-menu-btn\"\n                title=\"Projects\"\n                close={hideProjectMenu}\n            >\n                {sideBar}\n            </ColapseWrapper>\n    )\n}\n\nexport { SideBar }","import React from \"react\"\n\nconst TaskSort = ({ sortAfterInsertion, sortAfterName, sortAfterDate, sortAfterPriority, sortAfterCompleted }) => {\n    const taskSorting = {\n        \"...\": sortAfterInsertion,\n        \"Name\": sortAfterName,\n        \"Date\": sortAfterDate,\n        \"Priority\": sortAfterPriority,\n        \"Completed\": sortAfterCompleted,\n    }\n    return (\n        <select\n            className=\"task-sort-select\"\n            onChange={(e) => taskSorting[e.target.value]?.()}\n        >\n            {\n                Object.keys(taskSorting).map((option) =>\n                    <option key={option}>{option}</option>\n                )\n            }\n        </select>\n    )\n}\n\nexport { TaskSort }","import { Modal } from \"./Modal\";\nimport \"./RemoveModal.css\"\n\nconst RemoveModal = ({ itemName, remove, shouldRenderModal, closeModal }) => {\n    return (\n        <Modal title={`Remove ${itemName}?`} render={shouldRenderModal} close={closeModal} >\n            <div className=\"remove-modal\">\n                <button className=\"remove-modal-ok-btn\" onClick={remove}>Ok</button>\n                <button className=\"remove-modal-cancel-btn\" onClick={closeModal}>Cancel</button>\n            </div>\n        </Modal>\n    )\n}\n\nexport { RemoveModal }","import React from \"react\"\nimport { TaskSort } from \"./TaskSort\"\nimport { RemoveModal } from \"../modal/RemoveModal\"\nimport { useRenderModal } from \"../../hooks/useRenderModal\"\nimport \"./Content.css\"\n\nconst ProjectControlls = ({\n    projectName,\n    renderNewTask,\n    removeProject,\n    sortTasksAfterInsertion,\n    sortTasksAfterName,\n    sortTasksAfterDate,\n    sortTasksAfterPriority,\n    sortTasksAfterComplete,\n}) => {\n    const { shouldRenderModal, renderModal, closeModal } = useRenderModal();\n    return (\n        <div className=\"project-controlls\">\n            <button className=\"new-task-btn\" onClick={renderNewTask}>\n                New Task\n            </button>\n            <button className=\"remove-project-btn\" onClick={renderModal}>\n                Remove Project\n            </button>\n            <TaskSort\n                sortAfterInsertion={sortTasksAfterInsertion}\n                sortAfterName={sortTasksAfterName}\n                sortAfterDate={sortTasksAfterDate}\n                sortAfterPriority={sortTasksAfterPriority}\n                sortAfterCompleted={sortTasksAfterComplete}\n            />\n            <RemoveModal\n                itemName={projectName}\n                remove={removeProject}\n                shouldRenderModal={shouldRenderModal}\n                closeModal={closeModal}\n            />\n        </div>\n    )\n}\n\nexport { ProjectControlls }","\nconst taskPriorities = [\"Low\", \"Medium\", \"High\"];\n\nconst getPriorityWeight = (priority) => taskPriorities.indexOf(priority);\n\nexport { taskPriorities, getPriorityWeight }","import React, { useState } from \"react\"\nimport { useTaskFormValidation } from \"../../hooks/useTaskFormValidation\"\nimport { taskPriorities } from \"../../buisnesslogic/taskPriorities\"\nimport { format } from \"date-fns\"\nimport \"./TaskForm.css\"\n\nconst TaskForm = ({ handleInSubmit, handleInCancel, taskToEdit }) => {\n    const [name, setName] = useState(taskToEdit ? taskToEdit.name : \"\");\n    const [description, setDescription] = useState(taskToEdit ? taskToEdit.description : \"\");\n    const [dueDate, setDueDate] = useState(taskToEdit?.dueDate ? format(taskToEdit.dueDate, \"yyyy-MM-dd\") : \"\");\n    const [priority, setPriority] = useState(taskToEdit ? taskToEdit.priority : \"Low\");\n    const { errors, validate } = useTaskFormValidation(name, dueDate, !taskToEdit);\n\n    const cancel = (e) => {\n        e.preventDefault();\n        handleInCancel && handleInCancel();\n    }\n\n    const submit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (isValid) {\n            handleInSubmit && handleInSubmit(\n                name,\n                description,\n                dueDate !== \"\" ? new Date(dueDate) : null,\n                priority,\n            );\n        }\n    }\n\n    return (\n        <form id=\"task-form\">\n            <div className=\"task-form-input\">\n                <label htmlFor=\"task-form-name\">Name</label>\n                {errors.nameNotSet && <p className=\"error\">{errors.nameNotSet}</p>}\n                <input\n                    type=\"text\"\n                    id=\"task-form-name\"\n                    maxLength=\"50\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className=\"task-form-input\">\n                <label htmlFor=\"task-form-description\">Description</label>\n                <textarea\n                    type=\"text\"\n                    id=\"task-form-description\"\n                    maxLength=\"180\"\n                    rows=\"4\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                />\n            </div>\n            <div className=\"task-form-input\">\n                <label htmlFor=\"task-form-date\">Due date</label>\n                {errors.dateSetInPast && <p className=\"error\">{errors.dateSetInPast}</p>}\n                <input\n                    type=\"date\"\n                    id=\"task-form-date\"\n                    value={dueDate}\n                    onChange={(e) => setDueDate(e.target.value)}\n                />\n            </div>\n            <div className=\"task-form-input\">\n                <label htmlFor=\"task-form-priority\">Priority</label>\n                <select\n                    id=\"task-form-priority\"\n                    onChange={(e) => setPriority(e.target.value)}\n                    value={priority}\n                >\n                    {\n                        taskPriorities.map((priority, index) =>\n                            <option key={index}>{priority}</option>\n                        )\n                    }\n                </select>\n            </div>\n            <div className=\"task-form-actions\">\n                <button\n                    type=\"submit\"\n                    className=\"task-form-ok-btn ok-btn\"\n                    onClick={submit}\n                >{taskToEdit ? \"Save\" : \"Create\"}</button>\n                <button\n                    className=\"task-form-cancel-btn\"\n                    onClick={cancel}\n                >Cancel</button>\n            </div>\n        </form>\n    )\n}\n\nexport { TaskForm }","import { useEffect, useState, useRef } from \"react\";\n\nconst useTaskFormValidation = (name, dueDate, isEditTaskForm = false) => {\n    const [errors, setErrors] = useState({\n        nameNotSet: \"\",\n        dateSetInPast: \"\",\n    });\n\n    const isMount = useRef(true);\n    const onlyOnUpdate = (callback) => {\n        if (isMount.current) {\n            isMount.current = false;\n        } else {\n            callback();\n        }\n    }\n\n    useEffect(() => {\n        onlyOnUpdate(validate);\n    }, [name, dueDate]);\n\n    const validate = () => {\n        let nameNotSet = \"\";\n        let dateSetInPast = \"\";\n        if (name === \"\") {\n            nameNotSet = \"Name must be entered\";\n        }\n        if (isEditTaskForm && dueDate !== \"\") {\n            const today = new Date();\n            today.setHours(0);\n            if (new Date(dueDate) < today) {\n                dateSetInPast = \"Due date can't be set in the past\";\n            }\n        }\n        setErrors({\n            nameNotSet,\n            dateSetInPast,\n        });\n        return !nameNotSet && !dateSetInPast;\n    }\n\n    return {\n        errors,\n        validate,\n    }\n}\n\nexport { useTaskFormValidation }","import { useState } from \"react\";\nimport \"./MoveTaskForm.css\"\n\nconst MoveTaskForm = ({ handleInSubmit, handleInCancel, currentProjectId ,projects }) => {\n    const [destinationProjectId, setDestinationProjectId] = useState(currentProjectId);\n\n    const submit = (e) => {\n        e.preventDefault();\n        destinationProjectId && handleInSubmit(destinationProjectId);\n    }\n\n    const cancel = () => {\n        handleInCancel();\n    }\n\n    return (\n        <form id=\"move-task-form\">\n            <div className=\"task-form-input\">\n                <label htmlFor=\"task-form-project-select\">\n                    Move to\n                </label>\n                <select\n                    id=\"task-form-project-select\"\n                    value={destinationProjectId}\n                    onChange={(e) => setDestinationProjectId(e.target.value)}\n                >\n                    {\n                        projects?.map((project) =>\n                            <option\n                                key={project.id}\n                                value={project.id} >\n                                {project.name}\n                            </option>\n                        )\n                    }\n                </select>\n            </div>\n            <div className=\"task-form-actions\">\n                <button\n                    type=\"submit\"\n                    className=\"task-form-ok-btn ok-btn\"\n                    onClick={submit}\n                >Move</button>\n                <button\n                    className=\"task-form-cancel-btn\"\n                    onClick={cancel}\n                >Cancel</button>\n            </div>\n        </form>\n    )\n}\n\nexport { MoveTaskForm }","import React, { useState } from \"react\"\nimport { format } from \"date-fns\"\nimport { Modal } from \"../modal/Modal\"\nimport { RemoveModal} from \"../modal/RemoveModal\"\nimport { TaskForm } from \"../forms/TaskForm\"\nimport { MoveTaskForm } from \"../forms/MoveTaskForm\"\nimport { useRenderModal } from \"../../hooks/useRenderModal\"\nimport { useCurrentViewPortContext, smartphoneVw } from \"../../context/currentViewPortContext\"\nimport { FiEdit, FiDelete } from \"react-icons/fi\"\nimport { HiOutlineSwitchHorizontal } from \"react-icons/hi\"\nimport \"./TaskItem.css\"\n\nconst TaskItem = ({ name, description, dueDate, priority, isComplete, editTask, removeTask, moveTask, projectId, projectList }) => {\n    const [renderDetailView, setRenderDetailView] = useState(false);\n    const viewPort = useCurrentViewPortContext();\n\n    const {\n        shouldRenderModal: shouldRenderEditModal,\n        renderModal: renderEditModal,\n        closeModal: closeEditModal\n    } = useRenderModal();\n\n    const {\n        shouldRenderModal: shouldRenderRemoveModal,\n        renderModal: renderRemoveModal,\n        closeModal: closeRemoveModal\n    } = useRenderModal();\n\n    const {\n        shouldRenderModal: shouldRenderMoveModal,\n        renderModal: renderMoveModal,\n        closeModal: closeMoveModal\n    } = useRenderModal();\n\n    const Actions = (\n        <div className=\"task-item-actions\">\n            <FiEdit className=\"task-item-edit-btn\" onClick={renderEditModal} />\n            <FiDelete className=\"task-item-remove-btn\" onClick={renderRemoveModal} />\n            <HiOutlineSwitchHorizontal className=\"task-item-move-btn\" onClick={renderMoveModal} />\n        </div>\n    );\n    \n    return (\n        <>\n            <div className={`task-item ${priority} ${isComplete && \"completed\"}`}>\n                <div className=\"task-item-normal-view\">\n                    <input\n                        type=\"checkbox\"\n                        className=\"task-item-complete\"\n                        checked={isComplete}\n                        onChange={(e) => editTask(\n                            name,\n                            description,\n                            dueDate,\n                            priority,\n                            e.target.checked,\n                        )}\n                    />\n                    <p className=\"task-item-name\" onClick={() => setRenderDetailView(render => !render)}>{name}</p>\n                    <p className=\"task-item-date\">{dueDate ? format(dueDate, \"dd.MM.yyyy\") : \"\"}</p>\n                    {viewPort.vw <= smartphoneVw ? renderDetailView && Actions : Actions}\n                </div>\n                {\n                    renderDetailView && (description.length > 0)\n                    && <div className=\"task-item-detail-view\">\n                        <p className=\"task-item-description\">{description}</p>\n                    </div>\n                }\n            </div>\n            <Modal title=\"Edit Task\" render={shouldRenderEditModal} close={closeEditModal}>\n                <TaskForm\n                    handleInSubmit={\n                        (...args) => {\n                            editTask(...args)\n                            closeEditModal();\n                        }\n                    }\n                    handleInCancel={closeEditModal}\n                    taskToEdit={{ name, description, dueDate, priority, }}\n                />\n            </Modal>\n            <RemoveModal\n                itemName={name}\n                remove={removeTask}\n                shouldRenderModal={shouldRenderRemoveModal}\n                closeModal={closeRemoveModal}\n            />\n            <Modal title={`Move ${name}`} render={shouldRenderMoveModal} close={closeMoveModal}>\n                <MoveTaskForm\n                    handleInSubmit={(destinationId) => {\n                        moveTask(destinationId);\n                        closeMoveModal();\n                    }}\n                    handleInCancel={closeMoveModal}\n                    projects={projectList}\n                    currentProjectId={projectId}\n                />\n            </Modal>\n        </>\n    )\n}\n\nexport { TaskItem }","import React, { useState } from \"react\"\nimport { TaskItem } from \"../task/TaskItem\"\n\nconst TaskItems = ({ project, projects, editTask, removeTask, moveTask }) => {\n    return (\n        <>\n            {\n                project?.tasks.map((task) =>\n                    <TaskItem\n                        key={task.id}\n                        name={task.name}\n                        description={task.description}\n                        dueDate={task.dueDate}\n                        priority={task.priority}\n                        isComplete={task.isComplete}\n                        editTask={(...args) => editTask(project.id, task.id, ...args, task.isComplete)}\n                        removeTask={() => removeTask(project.id, task.id)}\n                        moveTask={(destinationId) => moveTask(project.id, destinationId, task.id)}\n                        projectId={project.id}\n                        projectList={projects.map((project) => ({ id: project.id, name: project.name }))}\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport { TaskItems }","import React, { useEffect } from \"react\"\nimport { ProjectControlls } from \"./ProjectControlls\"\nimport { Modal } from \"../modal/Modal\"\nimport { TaskForm } from \"../forms/TaskForm\"\nimport { useRenderModal } from \"../../hooks/useRenderModal\"\nimport { TaskItems } from \"../task/TaskItems\"\nimport \"./Content.css\"\n\nconst ProjectView = ({ project, projects, moveTask, removeProject, addTask, editTask, removeTask, taskSorting }) => {\n    const {\n        sortTasksAfterInsertion,\n        sortTasksAfterName,\n        sortTasksAfterDate,\n        sortTasksAfterPriority,\n        sortTasksAfterComplete } = taskSorting;\n\n    const {\n        shouldRenderModal,\n        renderModal,\n        closeModal } = useRenderModal();\n\n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, []);\n\n    if (!project) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className=\"project-view\">\n                <div className=\"project-view-header\">\n                    <h2 className=\"project-view-title\">{project.name}</h2>\n                    <ProjectControlls\n                        projectName={project.name}\n                        renderNewTask={renderModal}\n                        removeProject={() => removeProject(project.id)}\n                        sortTasksAfterInsertion={() => sortTasksAfterInsertion(project.id)}\n                        sortTasksAfterName={() => sortTasksAfterName(project.id)}\n                        sortTasksAfterDate={() => sortTasksAfterDate(project.id)}\n                        sortTasksAfterPriority={() => sortTasksAfterPriority(project.id)}\n                        sortTasksAfterComplete={() => sortTasksAfterComplete(project.id)}\n                    />\n                </div>\n                <div className=\"project-view-body\">\n                    <TaskItems\n                        project={project}\n                        editTask={editTask}\n                        removeTask={removeTask}\n                        projects={projects}\n                        moveTask={moveTask}\n                    />\n                </div>\n            </div>\n            <Modal title=\"New Task\" render={shouldRenderModal} close={closeModal} >\n                <TaskForm\n                    handleInSubmit={(...args) => {\n                        addTask(project.id, ...args);\n                        closeModal();\n                    }}\n                    handleInCancel={closeModal}\n                />\n            </Modal>\n        </>\n    )\n}\n\nexport { ProjectView }\n","import { taskPriorities } from \"./taskPriorities\"\nimport { format, getWeek, getMonth } from \"date-fns\"\nimport uniqid from \"uniqid\"\n\nconst filterTasks = (projects, filter) => {\n    return projects?.reduce((filtered, project) => {\n        const filteredTasks = project.tasks.filter(filter);\n        if (filteredTasks?.length) {\n            filtered.push({ ...project, filterId: uniqid(), tasks: filteredTasks });\n        }\n        return filtered;\n    }, []);\n}\n\nconst filterByText = (projects, text) => {\n    const searchText = text.toLowerCase();\n    return filterTasks(projects, (task) => {\n        const dueDate = task.dueDate;\n        return task.name.toLowerCase().includes(searchText)\n            || (task.dueDate && format(dueDate, \"dd.MM.yyyy\").includes(searchText))\n            || task.priority.toLowerCase() === searchText;\n    });\n}\n\nconst filterToday = (projects) => {\n    return filterTasks(projects, (task) => {\n        const today = new Date();\n        return task.dueDate\n            && task.dueDate.getFullYear() === today.getFullYear()\n            && task.dueDate.getMonth() === today.getMonth()\n            && task.dueDate.getDate() === today.getDate();\n    });\n}\n\nconst filterThisWeek = (projects) => {\n    return filterTasks(projects, (task) => {\n        return task.dueDate && getWeek(task.dueDate) === getWeek(new Date());\n    });\n}\n\nconst filterThisMonth = (projects) => {\n    return filterTasks(projects, (task) => {\n        return task.dueDate && getMonth(task.dueDate) === getMonth(new Date());\n    });\n}\n\nconst filterByThisDate = (projects, date) => {\n    return filterTasks(projects, (task) => {\n        return task.dueDate && task.dueDate.getFullYear() === date.getFullYear()\n            && task.dueDate.getMonth() === date.getMonth()\n            && task.dueDate.getDate() === date.getDate();\n    });\n}\n\nconst [, , high] = taskPriorities;\n\nconst filterCritical = (projects) => {\n    return filterTasks(projects, (task) => {\n        return task.priority === high;\n    });\n}\n\nconst filterCompleted = (projects) => {\n    return filterTasks(projects, (task) => {\n        return task.isComplete;\n    });\n}\n\nconst filterExpired = (projects) => {\n    return filterTasks(projects, (task) => {\n        const today = new Date();\n        today.setHours(0);\n        return task.dueDate && !task.isComplete && (task.dueDate < today);\n    });\n}\n\nconst filterAll = (projects) => {\n    return filterTasks(projects, (task) => {\n        return task;\n    });\n}\n\nconst filterMapping = {\n    \"filterTasksByText\": filterByText,\n    \"filterCriticalTasks\": filterCritical,\n    \"filterAllTasks\": filterAll,\n    \"filterCompletedTasks\": filterCompleted,\n    \"filterExpiredTasks\": filterExpired,\n    \"filterTasksToday\": filterToday,\n    \"filterTasksThisWeek\": filterThisWeek,\n    \"filterTasksThisMonth\": filterThisMonth,\n}\n\nexport {\n    filterByText,\n    filterCompleted,\n    filterCritical,\n    filterExpired,\n    filterAll,\n    filterToday,\n    filterThisWeek,\n    filterThisMonth,\n    filterByThisDate,\n    filterMapping,\n}","import React from \"react\"\nimport { ProjectItem } from \"../project/ProjectItem\"\nimport { TaskItems } from \"../task/TaskItems\"\nimport { filterMapping } from \"../../buisnesslogic/filterTasks\"\n\nconst FilterView = ({ filter, projects, selectProject, editTask, removeTask, moveTask }) => {\n    return (\n        <div className=\"filter-view\">\n            <div className=\"filter-view-header\">\n                <h2 className=\"filter-view-title\">{filter.title}</h2>\n            </div>\n            <div className=\"filter-view-body\">\n                {\n                    filterMapping[filter.key]?.(projects, filter.arg).map((project) =>\n                        project.tasks.length > 0\n                        && <div className=\"filter-item\" key={`${project.filterId}${project.id}`}>\n                            <ProjectItem\n                                key={project.filterId}\n                                name={project.name}\n                                setAsSelected={() => selectProject(project.id)}\n                            />\n                            <TaskItems\n                                key={`${project.id}${project.filterId}`}\n                                project={project}\n                                projects={projects}\n                                editTask={editTask}\n                                removeTask={removeTask}\n                                moveTask={moveTask}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport { FilterView }","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport { ProjectView } from \"./ProjectView\"\nimport { FilterView } from \"./FilterView\"\nimport \"./Content.css\"\n\nconst Content = ({ projects, selectedProjectId, selectProject, removeProject, addTask, editTask, removeTask, moveTask, taskSorting, filter }) => {\n    return (\n        <div className=\"content\">\n            <Switch>\n                <Route\n                    exact path=\"/\"\n                    component={() =>\n                        <ProjectView\n                            project={projects\n                                .find((project) => project.id === selectedProjectId)\n                            }\n                            removeProject={removeProject}\n                            addTask={addTask}\n                            editTask={editTask}\n                            removeTask={removeTask}\n                            moveTask={moveTask}\n                            taskSorting={taskSorting}\n                            projects={projects}\n                        />\n                    }\n                />\n                <Route\n                    exact path=\"/filtered_results\"\n                    component={() =>\n                        <FilterView\n                            filter={filter}\n                            projects={projects}\n                            selectProject={selectProject}\n                            editTask={editTask}\n                            removeTask={removeTask}\n                            moveTask={moveTask}\n                        />\n                    }\n                />\n            </Switch>\n        </div>\n    )\n}\n\nexport { Content }","import { useEffect, useRef } from \"react\"\n\nconst useLocalStorage = (key, data) => {\n    const isMount = useRef(true);\n    const onlyOnUpdate = (callback) => isMount.current ? isMount.current = false : callback();\n\n    useEffect(() => {\n        onlyOnUpdate(() => localStorage.setItem(key, JSON.stringify(data)))\n    }, [key, data]);\n\n    const load = () => {\n        try {\n            const saved = JSON.parse(localStorage.getItem(key));\n            return saved;\n        } catch (err) {\n            console.log(err);\n            return null;\n        }\n    }\n\n    return { load }\n}\n\nexport { useLocalStorage }","import uniqid from \"uniqid\"\n\nconst randomDaysInTheFuture = (days) => {\n    const randOffset = Math.floor(Math.random() * days);\n    const randomDate = new Date();\n    randomDate.setTime(Date.now() + (1000 * 60 * 60 * 24 * randOffset));\n    return randomDate;\n}\n\nconst createExampleProjects = () => {\n    return [\n        {\n            id: uniqid(),\n            name: \"Unsorted stuff\",\n            tasks: [\n                {\n                    id: uniqid(),\n                    name: \"Groecery shopping\",\n                    description: \"Milk, apples, bananas, bread\",\n                    dueDate: randomDaysInTheFuture(3),\n                    priority: \"Low\",\n                    isComplete: true,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Help moving\",\n                    description: \"Help a friend moving to munich\",\n                    dueDate: randomDaysInTheFuture(30),\n                    priority: \"High\",\n                    isComplete: false,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Vacation\",\n                    description: \"Fly to the philippines\",\n                    dueDate: randomDaysInTheFuture(60),\n                    priority: \"High\",\n                    isComplete: false,\n                },\n            ]\n        },\n        {\n            id: uniqid(),\n            name: \"Homework\",\n            tasks: [\n                {\n                    id: uniqid(),\n                    name: \"Weight training\",\n                    description: \"10 reps, with 40kg, three times\",\n                    dueDate: randomDaysInTheFuture(15),\n                    priority: \"Low\",\n                    isComplete: true,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Cutting tree branches\",\n                    description: \"Old dry and dead branches needs to be cut\",\n                    dueDate: randomDaysInTheFuture(10),\n                    priority: \"Medium\",\n                    isComplete: true,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Clean the car\",\n                    description: \"Wash and vacuum clean the car\",\n                    dueDate: randomDaysInTheFuture(11),\n                    priority: \"Low\",\n                    isComplete: true,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Garage cleaning\",\n                    description: \"\",\n                    dueDate: randomDaysInTheFuture(30),\n                    priority: \"Low\",\n                    isComplete: false,\n                },\n            ]\n        },\n        {\n            id: uniqid(),\n            name: \"Web development\",\n            tasks: [\n                {\n                    id: uniqid(),\n                    name: \"Learn Mongo DB\",\n                    description: \"\",\n                    dueDate: randomDaysInTheFuture(44),\n                    priority: \"Low\",\n                    isComplete: false,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Learn a server; next.js or express.js\",\n                    description: \"\",\n                    dueDate: randomDaysInTheFuture(33),\n                    priority: \"Low\",\n                    isComplete: false,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Build the shopping-cart project\",\n                    description: \"\",\n                    dueDate: randomDaysInTheFuture(19),\n                    priority: \"Medium\",\n                    isComplete: false,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Finish the todo-app project in react\",\n                    description: \"\",\n                    dueDate: randomDaysInTheFuture(30),\n                    priority: \"Low\",\n                    isComplete: true,\n                },\n                {\n                    id: uniqid(),\n                    name: \"Learn Design Patterns\",\n                    description: \"\",\n                    dueDate: new Date(\"2021-03-11\"),\n                    priority: \"High\",\n                    isComplete: false,\n                }\n            ]\n        },\n        {\n            id: uniqid(),\n            name: \"Empty\",\n            tasks: [],\n        },\n    ]\n}\n\nexport { createExampleProjects }","import { useEffect, useState } from \"react\"\nimport { useLocalStorage } from \"./useLocalStorage\"\nimport { add, edit, remove, addATask, editATask, moveATask, removeATask } from \"../buisnesslogic/projects\"\nimport { sortAfterInsertion, sortAfterName, sortAfterDate, sortAfterPriority, sortAfterComplete } from \"../buisnesslogic/sortTasks\"\nimport { createExampleProjects } from \"../buisnesslogic/createExampleProjects\"\nimport uniqid from \"uniqid\"\n\nconst DEFAULT = [\n    {\n        id: \"inbox\",\n        name: \"Inbox\",\n        tasks: [\n            {\n                id: uniqid(),\n                name: \"Example Task\",\n                description: \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. \",\n                dueDate: new Date(),\n                priority: \"Low\",\n                isComplete: true,\n            }\n        ],\n    }\n];\n\nconst convert = (serialized) => {\n    serialized?.forEach((project) => project.tasks\n        .forEach((task) => {\n            task.dueDate = task.dueDate ? new Date(task.dueDate) : null;\n        })\n    );\n    return serialized;\n}\n\nconst useProjects = () => {\n    const [projects, setProjects] = useState([]);\n\n    const { load } = useLocalStorage(\"projects\", projects);\n\n    const [currentProjectId, setCurrentProjectId] = useState(\"inbox\");\n\n    useEffect(() => {\n        const savedProjects = convert(load());\n        setProjects(\n            savedProjects\n                ? savedProjects\n                : [\n                    ...DEFAULT,\n                    ...createExampleProjects(),\n                ]\n        );\n    }, []);\n\n    const addProject = (name) => {\n        setProjects(\n            projects => {\n                const id = uniqid();\n                setCurrentProjectId(id);\n                return add(projects, id, name);\n            }\n        );\n    }\n\n    const editProject = (id, name) => {\n        if (id === DEFAULT.id) return;\n        setProjects(projects => edit(projects, id, name));\n    }\n\n    const removeProject = (id) => {\n        if (id === DEFAULT.id) return;\n        setProjects(projects => remove(projects, id));\n    }\n\n    const addTask = (projectId, name, description, dueDate, priority) => {\n        setProjects(projects =>\n            addATask(projects, projectId, name, description, dueDate, priority)\n        );\n    }\n\n    const editTask = (projectId, id, name, description, dueDate, priority, isComplete) => {\n        setProjects(projects =>\n            editATask(projects, projectId, id, name, description, dueDate, priority, isComplete)\n        );\n    }\n\n    const moveTask = (projectId, destinationId, id) => {\n        setProjects(projects => moveATask(projects, projectId, destinationId, id));\n    }\n\n    const removeTask = (projectId, id) => {\n        setProjects(projects => removeATask(projects, projectId, id));\n    }\n\n    const sortTasksAfterInsertion = (projectId) => {\n        setProjects(projects => sortAfterInsertion(projects, projectId));\n    }\n\n    const sortTasksAfterName = (projectId) => {\n        setProjects(projects => sortAfterName(projects, projectId));\n    }\n\n    const sortTasksAfterDate = (projectId) => {\n        setProjects(projects => sortAfterDate(projects, projectId))\n    }\n\n    const sortTasksAfterPriority = (projectId) => {\n        setProjects(projects => sortAfterPriority(projects, projectId));\n    }\n\n    const sortTasksAfterComplete = (projectId) => {\n        setProjects(projects => sortAfterComplete(projects, projectId));\n    }\n\n    return {\n        projects,\n        currentProjectId,\n        setCurrentProjectId,\n        addProject,\n        editProject,\n        removeProject,\n        addTask,\n        editTask,\n        removeTask,\n        moveTask,\n        sortTasksAfterInsertion,\n        sortTasksAfterName,\n        sortTasksAfterDate,\n        sortTasksAfterPriority,\n        sortTasksAfterComplete,\n    }\n}\n\nexport { useProjects }","import uniqid from \"uniqid\"\n\nconst add = (projects, id, name) => {\n    return [...projects, { id, name, tasks: [] }];\n}\n\nconst edit = (projects, id, name) => {\n    return projects.map((project) => project.id === id\n        ? { ...project, name }\n        : project\n    )\n}\n\nconst remove = (projects, id) => {\n    return projects.filter((project) => project.id !== id);\n}\n\nconst addATask = (projects, projectId, name, description, dueDate, priority) => {\n    return projects.map((project) =>\n        project.id === projectId\n            ? {\n                ...project,\n                tasks: [...project.tasks, {\n                    id: uniqid(),\n                    name,\n                    description,\n                    dueDate,\n                    priority,\n                    isComplete: false,\n                    timestamp: Date.now(),\n                }],\n            }\n            : project\n    )\n}\n\nconst editATask = (projects, projectId, id, name, description, dueDate, priority, isComplete) => {\n    return projects.map((project) =>\n        project.id === projectId\n            ? {\n                ...project,\n                tasks: project.tasks.map((task) =>\n                    task.id === id\n                        ? { ...task, name, description, dueDate, priority, isComplete }\n                        : task\n                ),\n            }\n            : project\n    )\n}\n\nconst moveATask = (projects, projectId, destinationId, id) => {\n    const taskToMove = {\n        ...projects.find((project) => project.id === projectId)\n            .tasks\n            .find((task) => task.id === id)\n    };\n    return projects.map((project) =>\n        project.id === projectId\n            ? { ...project, tasks: project.tasks.filter((task) => task.id !== id) }\n            : project\n    ).map((project) =>\n        project.id === destinationId\n            ? {\n                ...project,\n                tasks: [...project.tasks, { ...taskToMove }]\n            }\n            : project\n    )\n}\n\nconst removeATask = (projects, projectId, id) => {\n    return projects.map((project) =>\n        project.id === projectId\n            ? { ...project, tasks: project.tasks.filter((task) => task.id !== id) }\n            : project\n    )\n}\n\nexport {\n    add,\n    edit,\n    remove,\n    addATask,\n    editATask,\n    moveATask,\n    removeATask,\n}","import { getPriorityWeight } from \"./taskPriorities\"\n\nconst sortAfterInsertion = (projects, projectId) => {\n    return projects?.map((project) =>\n        project.id === projectId\n            ? {\n                ...project, tasks: [...project.tasks]\n                    .sort((a, b) => a.timestamp - b.timestamp)\n            }\n            : project\n    );\n}\n\nconst sortAfterName = (projects, projectId) => {\n    return projects?.map((project) =>\n        project.id === projectId\n            ? {\n                ...project, tasks: [...project.tasks]\n                    .sort((a, b) => a.name.localeCompare(b.name))\n            }\n            : project\n    );\n}\n\nconst sortAfterDate = (projects, projectId) => {\n    return projects?.map((project) =>\n        project.id === projectId\n            ? {\n                ...project, tasks: [...project.tasks]\n                    .sort((a, b) => {\n                        if (!a.dueDate) return 1;\n                        if (!b.dueDate) return -1;\n                        return a.dueDate - b.dueDate;\n                    })\n            }\n            : project\n    );\n}\n\nconst sortAfterPriority = (projects, projectId) => {\n    return projects?.map((project) =>\n        project.id === projectId\n            ? {\n                ...project, tasks: [...project.tasks]\n                    .sort((a, b) => getPriorityWeight(b.priority) - getPriorityWeight(a.priority))\n            }\n            : project\n    );\n}\n\nconst sortAfterComplete = (projects, projectId) => {\n    return projects?.map((project) =>\n        project.id === projectId\n            ? {\n                ...project, tasks: [...project.tasks]\n                    .sort((a, b) => {\n                        if (a.isComplete) return -1;\n                        if (b.isComplete) return 1;\n                    })\n            }\n            : project\n    );\n}\n\n\nexport {\n    sortAfterInsertion,\n    sortAfterName,\n    sortAfterDate,\n    sortAfterPriority,\n    sortAfterComplete,\n}","import React, { useEffect, useState } from \"react\"\nimport { Header } from \"./components/header/Header\"\nimport { SideBar } from \"./components/sidebar/Sidebar\"\nimport { Content } from \"./components/content/Content\"\nimport { useProjects } from \"./hooks/useProjects\"\nimport { useFilter } from \"./hooks/useTaskFilter\"\nimport { useNavigateContent } from \"./hooks/useNavigateContent\"\nimport \"./App.css\"\n\nfunction App() {\n  const {\n    projects,\n    addProject,\n    editProject,\n    removeProject,\n    addTask,\n    editTask,\n    removeTask,\n    moveTask,\n    sortTasksAfterInsertion,\n    sortTasksAfterName,\n    sortTasksAfterDate,\n    sortTasksAfterPriority,\n    sortTasksAfterComplete,\n    currentProjectId,\n    setCurrentProjectId,\n  } = useProjects();\n\n  // const history = useHistory();\n  // useEffect(() => {\n  //   history.replace(\"/\");\n  // }, []);\n\n  const { navigateTo } = useNavigateContent();\n\n  const [hideProjectMenu, setHideProjectMenu] = useState(true);\n  const closeProjectMenu = () => setHideProjectMenu(prev => !prev);\n\n  const selectProject = (id) => {\n    navigateTo(\"/\", () => {\n      setCurrentProjectId(id);\n      closeProjectMenu();\n    });\n  }\n\n  const {\n    filter,\n    filterTasksByText,\n    filterAllTasks,\n    filterCriticalTasks,\n    filterCompletedTasks,\n    filterExpiredTasks,\n    filterTasksToday,\n    filterTasksThisWeek,\n    filterTasksThisMonth\n  } = useFilter(() => {\n    // history.replace(\"/filtered_results\");\n    // setCurrentProjectId(\"\");\n    // closeProjectMenu();\n    navigateTo(\"/filtered_results\", () => {\n      setCurrentProjectId(\"\");\n      closeProjectMenu();\n    })\n  });\n\n  return (\n    <div className=\"App\">\n      <Header\n        filterTasksByText={filterTasksByText}\n        filterAllTasks={filterAllTasks}\n        filterCriticalTasks={filterCriticalTasks}\n        filterCompletedTasks={filterCompletedTasks}\n        filterExpiredTasks={filterExpiredTasks}\n      />\n      <main>\n        <SideBar\n          projects={projects}\n          selectedProjectId={currentProjectId}\n          selectProject={selectProject}\n          addProject={addProject}\n          editProject={editProject}\n          timeTaskFilter={{\n            filterTasksToday,\n            filterTasksThisWeek,\n            filterTasksThisMonth,\n          }}\n          hideProjectMenu={hideProjectMenu}\n          closeProjectMenu={closeProjectMenu}\n        />\n        <Content\n          projects={projects}\n          selectedProjectId={currentProjectId}\n          selectProject={selectProject}\n          removeProject={removeProject}\n          addTask={addTask}\n          editTask={editTask}\n          removeTask={removeTask}\n          moveTask={moveTask}\n          taskSorting={{\n            sortTasksAfterInsertion,\n            sortTasksAfterName,\n            sortTasksAfterDate,\n            sortTasksAfterPriority,\n            sortTasksAfterComplete,\n          }}\n          filter={filter}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"\n\nconst useNavigateContent = () => {\n    const history = useHistory();\n\n    useEffect(() => {\n        history.replace(\"/\");\n    }, [history]);\n\n    const navigateTo = (path, callback) => {\n        history.replace(path);\n        callback && callback();\n    }\n\n    return { navigateTo }\n}\n\nexport { useNavigateContent }","import { useState } from \"react\";\n\nconst useFilter = (executeOnFilter) => {\n    const [filter, setFilter] = useState({\n        title: \"\",\n        key: \"\",\n        arg: null,\n    });\n\n    const filterTasksByText = (text) => {\n        setFilter({\n            title: `Search ${text}`,\n            key: \"filterTasksByText\",\n            arg: text,\n        });\n        executeOnFilter();\n    }\n\n    const filterAllTasks = () => {\n        setFilter({\n            title: \"All Tasks\",\n            key: \"filterAllTasks\",\n        });\n        executeOnFilter();\n    }\n\n    const filterCriticalTasks = () => {\n        setFilter({\n            title: \"Critical Tasks\",\n            key: \"filterCriticalTasks\",\n        });\n        executeOnFilter();\n    }\n\n    const filterCompletedTasks = () => {\n        setFilter({\n            title: \"Completed Tasks\",\n            key: \"filterCompletedTasks\",\n        });\n        executeOnFilter();\n    }\n\n    const filterExpiredTasks = () => {\n        setFilter({\n            title: \"Expired Tasks\",\n            key: \"filterExpiredTasks\",\n        });\n        executeOnFilter();\n    }\n\n    const filterTasksToday = () => {\n        setFilter({\n            title: \"Tasks Today\",\n            key: \"filterTasksToday\",\n        });\n        executeOnFilter();\n    }\n\n    const filterTasksThisWeek = () => {\n        setFilter({\n            title: \"Tasks this Week\",\n            key: \"filterTasksThisWeek\",\n        });\n        executeOnFilter();\n    }\n\n    const filterTasksThisMonth = () => {\n        setFilter({\n            title: \"Tasks this Month\",\n            key: \"filterTasksThisMonth\",\n        });\n        executeOnFilter();\n    }\n\n    return {\n        filter,\n        filterTasksByText,\n        filterAllTasks,\n        filterCriticalTasks,\n        filterCompletedTasks,\n        filterExpiredTasks,\n        filterTasksToday,\n        filterTasksThisWeek,\n        filterTasksThisMonth,\n    }\n}\n\nexport { useFilter }","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { CurrentViewPortProvider } from \"./context/currentViewPortContext\"\nimport App from \"./App\"\nimport './index.css'\nimport \"./mobile.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <CurrentViewPortProvider>\n        <App />\n      </CurrentViewPortProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}